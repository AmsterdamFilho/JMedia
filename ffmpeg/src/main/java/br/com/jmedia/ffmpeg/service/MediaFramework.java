package br.com.jmedia.ffmpeg.service;

import br.com.jmedia.ffmpeg.model.MediaFrameworkSettings;
import br.com.jmedia.core.control.MediaFacadeClient;
import br.com.jmedia.core.model.NoMediaDeviceException;
import br.com.jwheel.utils.StringUtils;
import br.com.jmedia.ffmpeg.control.FfmpegFacade;
import org.slf4j.Logger;

import javax.inject.Inject;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Lima Filho, A. L. - amsterdam@luvva.com.br
 */
public abstract class MediaFramework
{
    private @Inject Logger       logger;
    private @Inject ProcessUtils processUtils;

    /**
     * Query the OS to set default settings to the media provider object. This method will find the most suitable video
     * device and its appropriate settings and set them to the settings object.
     *
     * @param settings the object where the settings will be stored
     * @throws IOException            if an IOException occurs while executing the process to query available devices
     * @throws NoMediaDeviceException if could not find a video device to use
     */
    public void loadInitialSettings (MediaFrameworkSettings settings) throws
            IOException, NoMediaDeviceException, InterruptedException
    {
        guessDesiredVideoSettings(settings, processUtils.getStdOutAndStdErrOutput(getListDevicesCommand(settings)));
        setDefaultApplicationSettings(settings);
    }

    /**
     * Parses an error String generated by the media framework, identifying the exception and dispatching it to the
     * mediaFacadeClient.
     *
     * @param previewErrorMessage the error message generated by the framework
     * @param mediaFacadeClient   the object that can handle each exception type
     */
    public abstract void parsePreviewError (String previewErrorMessage, MediaFacadeClient mediaFacadeClient);

    /**
     * Parses an error String generated by the media framework, identifying the exception and dispatching it to the
     * mediaFacadeClient.
     *
     * @param recordErrorMessage the error message generated by the framework
     * @param mediaFacadeClient  the object that can handle each exception type
     */
    public abstract void parseRecordError (String recordErrorMessage, MediaFacadeClient mediaFacadeClient);

    //<editor-fold desc="Template methods">

    abstract List<String> getListDevicesCommand (MediaFrameworkSettings settings);

    abstract String filterName ();

    abstract String inputVideoDeviceCommand ();

    abstract String crossbarVideoInputPinNumberCommand ();

    abstract void guessDesiredVideoSettings (MediaFrameworkSettings settings, String listDevicesCommandResult)
            throws IOException, NoMediaDeviceException;

    //</editor-fold>

    private void setDefaultApplicationSettings (MediaFrameworkSettings settings)
    {
        settings.setCrf("18");
        //noinspection SpellCheckingInspection
        settings.setPreset("ultrafast");

        //<editor-fold desc="Capture command">

        {
            List<String> captureCommand = new ArrayList<>();

            // input
            captureCommand.add("-f");
            captureCommand.add(filterName());
            captureCommand.add("-framerate");
            captureCommand.add(MediaFrameworkSettings.FRAME_RATE);
            captureCommand.add("-pixel_format");
            captureCommand.add(MediaFrameworkSettings.PIXEL_FORMAT);
            captureCommand.add("-video_size");
            captureCommand.add(MediaFrameworkSettings.VIDEO_SIZE);
            if (!StringUtils.isNullOrEmpty(settings.getPinNumber()))
            {
                //noinspection SpellCheckingInspection
                captureCommand.add(crossbarVideoInputPinNumberCommand());
                captureCommand.add(MediaFrameworkSettings.PIN_NUMBER);
            }
            captureCommand.add("-i");
            captureCommand.add(inputVideoDeviceCommand());

            // output
            captureCommand.add("-f");
            //noinspection SpellCheckingInspection
            captureCommand.add("rawvideo");
            captureCommand.add("pipe:");
            settings.setCaptureCommand(captureCommand);
        }

        //</editor-fold>

        //<editor-fold desc="Encode command">

        {
            List<String> encodeCommand = new ArrayList<>();

            // input
            encodeCommand.add("-f");
            //noinspection SpellCheckingInspection
            encodeCommand.add("rawvideo");
            encodeCommand.add("-pixel_format");
            encodeCommand.add(MediaFrameworkSettings.PIXEL_FORMAT);
            encodeCommand.add("-video_size");
            encodeCommand.add(MediaFrameworkSettings.VIDEO_SIZE);
            encodeCommand.add("-i");
            encodeCommand.add("pipe:");

            // output
            encodeCommand.add("-f");
            //noinspection SpellCheckingInspection
            encodeCommand.add("rawvideo");
            //noinspection SpellCheckingInspection
            encodeCommand.add("-pix_fmt");
            encodeCommand.add(FfmpegFacade.SUPPORTED_PIXEL_FORMAT);
            //noinspection SpellCheckingInspection
            encodeCommand.add("pipe:");
            settings.setEncodeCommand(encodeCommand);
        }

        //</editor-fold>

        //<editor-fold desc="Record command">

        {
            List<String> recordCommand = new ArrayList<>();

            // input
            recordCommand.add("-f");
            //noinspection SpellCheckingInspection
            recordCommand.add("rawvideo");
            recordCommand.add("-pixel_format");
            recordCommand.add(MediaFrameworkSettings.PIXEL_FORMAT);
            recordCommand.add("-video_size");
            recordCommand.add(MediaFrameworkSettings.VIDEO_SIZE);
            recordCommand.add("-i");
            recordCommand.add("pipe:");

            // output
            recordCommand.add("-codec:v");
            //noinspection SpellCheckingInspection
            recordCommand.add("libx264");
            recordCommand.add("-crf");
            recordCommand.add(MediaFrameworkSettings.CRF);
            recordCommand.add("-preset");
            recordCommand.add(MediaFrameworkSettings.PRESET);
            recordCommand.add(MediaFrameworkSettings.FILE_TO_RECORD);
            settings.setRecordCommand(recordCommand);
        }

        //</editor-fold>
    }
}
